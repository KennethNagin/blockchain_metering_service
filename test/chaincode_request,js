const https = require('https');
const fs = require('fs');
const stdio = require('stdio')
var date = new Date();

var chaincodeIDPath = __dirname + "/chaincodeID";
var chaincodeID = fs.readFileSync(chaincodeIDPath, 'utf8');
chaincodeID = chaincodeID.trim(); 

var opts = stdio.getopt({
    'method': {key: 'm', args: 1, default: 'query', description: 'chaincode method'},
	'function': {key: 'f', args: 1, default: 'read', description: 'chaincode function'},
    'arguments': {key: 'a', args: '*', description: 'chaincode function arguments'},
    'user': {key: 'u', args: 1, default: 'user_type1_1', description: 'user i.e. secureContext'},
});
console.log("args: "+opts.arguments)
console.log("to string args: "+opts.arguments.toString())
var _args = [] 
if (Array.isArray(opts.arguments)) {
	_args = opts.arguments	
} else {
	_args = [ opts.arguments ]
}
var postData = JSON.stringify(
{
  jsonrpc: '2.0',
  method: opts.method,
  params: {
    type: 1,
    chaincodeID: {
      name: chaincodeID
    },
    ctorMsg: {
      function: opts.function,
       args: 
         _args
      
    },
    secureContext: opts.user
  },
  id: 0

});


console.log(postData);
var options = {
  hostname: 'c1bdbab254a44bb6be11653e6169b09f-vp0.us.blockchain.ibm.com',
  port: 5001,
  path: '/chaincode',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

var req = https.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('Completed read.');
  });
});

req.on('error', (e) => {
  console.log(`problem with request: ${e.message}`);
});

// write data to request body
req.write(postData);
req.end();


